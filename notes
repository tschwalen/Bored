#
#
#   This file contains unorganized notes to self during development. Will be removed at some point.
#
#
#


First built-ins

Strings: immutable heterogenous char vector

    var message = 'Similar to how they are in every language';
    message[3]
    >>> 'i'

Heterogeneous vector : hevec:

    var example = ['string', 445, [1, 2, 3]]

    example[1] = 'different value';
    example[2][2] = 4;
    >>> ['string', 'different value', [1, 2, 4]]

    * as name implies, can contain all different types and can be nested jaggedly
    * us references, access time is slow and you lose out on spatial locality, but flexibility is improved

Homogenous vector : hovec:

    var num_example = <[1, 2, 3]>;
    var two_dimensional = <[ <[3, 3, 3]>, <[3, 0, 3]> ]>



    num_example[0]
    >>> 1
    two_dimensional[2, 1]
    >>> 0

    * homogenous vector -> contains all the same type
    *                   -> can be nested, but cannot be jagged
    *                   -> stored contiguously in memory

-----------------Next step after above is implemented-------------------
Everything here is tentative

Associative Array : assarr

decisions to make: 
- syntax
- Heterogeneous or homogenous type
- implementation

Classes, records, structs, etc.

- Aggregate data types are extremely useful. 
- What I'm thinking right now is to have something akin to C/C++ structs
    - make class methods and constructors optional, so that you can easily make a struct/namedtuple data type
    - but also make class methods and constructors syntactically pleasant so that object oriented code is easy to write

- Inheritance/Polymorphism/Prototype rules
    - I like how python does it

